#!/bin/bash

# ------------------------------------------------------

class_nohup() {
	echo "nohup.out"
}

class_swp() {
	echo ".*.swp:.*.swo"
}

class_win() {
	echo "desktop.ini:Thumbs.db"
}

class_mac() {
	echo "__MACOSX:.Trashes:.Spotlight*:._*:.DS_Store"
}

class_backup() {
	echo ".*~:*~:*.bak"
}

class_cobj() {
	echo "a.out:*.o"
}

class_orca() {
	echo "*.gbw:*.prop:*.tmp:*.engrad:*.opt"
}

class_pyobj() {
	echo "__pycache__:*.pyc"
}

class_tex() {
	echo "*.out:*.aux:*.log:*.bbl:*.blg"
}

# ------------------------------------------------------

fill_list_class_cache() {
        [ "$COMMANDS" ] && return
        COMMANDS=$(declare -f | sed -ne '/^class_.* ()/s/^class_\([[:graph:]]*\) ().*/\1/p' | tr '\n' ' ')
}

list_of_classes() {
        fill_list_class_cache
        echo -n "$COMMANDS"
}

usage() {
	cat <<-EOF
	$(basename $0) [ -h | --help | <Option> ] [ <dir> ]

	Cleanup temporary files from <dir>. If <dir> is missing
	it defaults to the current working directory.

	Options:
	--force, -f
	Remove files without asking

	--recursive, -r
	Recursively act on all subdirectories as well

	--list, -l
	Just print what would be deleted and do not delete
	anything

	-o <class1>:<class2>: ...
	--only <class1>:<class2>: ...
	Only delete files from these classes

	-i <class1>:<class2>: ...
	--include <class1>:<class2>: ...
	Apart from the default classes (see below), also include
	those to the default selection.

	-e <class1>:<class2>: ...
	--exclude <class1>:<class2>: ...
	Do not delete files from these classes. Takes preference
	over -i/--include (i.e. if both specify the same class,
	then -e/--exclude wins.

	Per default the following classes are considered:
	$CLASSES

	Classes:
	EOF
        for class in $(list_of_classes); do
		printf "  %-10s%s\n" $class $(class_$class)
	done
}

build_findargs() {
	# $1: Classes to consider as a : separated list
	# $2: Classes to exclude as a : separated list
	#
	# prints the findargs to stdout

	local CLASSES="$1"
	local EXCLUDE="$2"

	local OIFS="$IFS"
	IFS=":
	"

	for class in $CLASSES; do
		IFS="$OIFS"
		# deal (somewhat improperly) with excludes -> what happens if . $ or so in class names
		echo "$EXCLUDE" | grep -q ":$class:" && continue

		local EXTRA="$(class_$class | awk '
		BEGIN { FS=":" }

		{
			for(i=1; i <= NF; ++i) {
				if (i > 1) printf "-o "
				printf "-name \"" $i "\" "
			}
		}
		')"
		[ "$FINDARGS" ] && FINDARGS="$FINDARGS -o "
		FINDARGS="$FINDARGS$EXTRA"
	done
	IFS="$OIFS"

	echo "$FINDARGS"
}

delete_files() {
	# delete all matching files without asking
	#
	# $1: directory to work within
	# $2: maximum depth to go to
	# $3: find args files should satisfy

	local DIR="$1"
	local MAXDEPTH="$2"
	local FINDARGS="$3"
	eval "find \"$DIR\" $MAXDEPTH \( $FINDARGS \) -exec rm -r {} \;"
}

delete_files_ask() {
	# delete all matching files without asking
	#
	# $1: directory to work within
	# $2: maximum depth to go to
	# $3: find args files should satisfy

	local DIR="$1"
	local MAXDEPTH="$2"
	local FINDARGS="$3"
	eval "find \"$DIR\" $MAXDEPTH \( $FINDARGS \) -exec rm -ri {} \;"
}

print_files_to_delete() {
	# delete all matching files without asking
	#
	# $1: directory to work within
	# $2: maximum depth to go to
	# $3: find args files should satisfy

	local DIR="$1"
	local MAXDEPTH="$2"
	local FINDARGS="$3"
	eval "find \"$DIR\" $MAXDEPTH \( $FINDARGS \) -print"
}

# ----------------------------------------------------

SIMULATE=n
RECURSIVE=n
FORCE=n
CLASSES="win:mac:backup"
EXCLUDE=""
DIR="."

while [ "$1" ]; do
	case "$1" in
		-h|--help)
			usage
			exit 0
			;;
		--force|-f)
			FORCE=y
			;;
		--recursive|-r)
			RECURSIVE=y
			;;
		--list|-l)
			SIMULATE=y
			;;
		--only|-o)
			shift
			CLASSES="$1"
			;;
		--exclude|-e)
			shift
			EXCLUDE=":$1:"
			;;
		--include|-i)
			shift
			CLASSES="$CLASSES:$1"
			;;
		*)
			if [ ! -d "$1" ]; then
				echo "Invalid argument or invalid directory: $1" >&2
				exit 1
			fi
			DIR="$1"
			;;
	esac
	shift
done

MAXDEPTH="-maxdepth 1"
if [ "$RECURSIVE" == "y" ]; then
	MAXDEPTH=
fi
FINDARGS=$(build_findargs "$CLASSES" "$EXCLUDE")

if [ "$FORCE" == "y" ]; then
	# just delete and exit
	delete_files "$DIR" "$MAXDEPTH" "$FINDARGS"
	exit $?
fi

# Print what would be deleted
FILES=$(print_files_to_delete "$DIR" "$MAXDEPTH" "$FINDARGS")
RES=$?

# no files found
[ -z "$FILES" ] && exit 0

# print the findings:
echo "$FILES"

if [ "$SIMULATE" == "y" ]; then
	# if only simulate we are done
	exit $RES
fi

echo
read -p "Delete these temporary files? ([y]es all / [n]one / [a]sk)  " RES

if [ "$RES" == "y" ]; then
	delete_files "$DIR" "$MAXDEPTH" "$FINDARGS"
	exit $?
fi

if [ "$RES" == "a" ]; then
	delete_files_ask "$DIR" "$MAXDEPTH" "$FINDARGS"
	exit $?
fi

exit 0
